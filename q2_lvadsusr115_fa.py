# -*- coding: utf-8 -*-
"""Q2_LVADSUSR115_FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PBCKgLWCUJVRVa30Bj8kwURZ6TLsdhUm
"""

import pandas as pd
import warnings as wr

import matplotlib.pyplot as plt

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
import seaborn as sns
wr.filterwarnings('ignore')
data = pd.read_csv("/content/auto-mpg.csv")
data.head()

#EDA
data.describe()
print(data.shape)
print(data.info())

print(data.describe())

nulls =data.isnull().sum()
print(nulls)

data.hist(figsize=(10, 8))
plt.tight_layout()
plt.show()

sns.pairplot(data, diag_kind='kde')
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

data.replace('?', pd.NA, inplace=True)

data.dropna(inplace=True)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

#data training
X = data.drop(columns=["mpg", "car name"])
y = data["mpg"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression(lr)

print("Linear Regression:")
lr_model = LinearRegression()
lr_model.fit(X, y)

y_pred_lr = lr_model.predict(X_test)


mse_lr = mean_squared_error(y_test, y_pred_lr)
r2_lr = r2_score(y_test, y_pred_lr)
print("Mean Squared Error (Linear Regression):", mse_lr)
print("R-squared (Linear Regression):", r2_lr)

# Decision Tree Regression
print("\nDecision Tree Regression:")

dt_model = DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train, y_train)

y_pred_dt = dt_model.predict(X_test)

mse_dt = mean_squared_error(y_test, y_pred_dt)
r2_dt = r2_score(y_test, y_pred_dt)
print("Mean Squared Error (Decision Tree Regression):", mse_dt)
print("R-squared (Decision Tree Regression):", r2_dt)

# Random Forest Regression
print("\nRandom Forest Regression:")

rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)
print("Mean Squared Error (Random Forest Regression):", mse_rf)
print("R-squared (Random Forest Regression):", r2_rf)

# the best model
best_model = None
best_mse = float('inf')
best_r2 = -float('inf')

# Linear Regression
if mse_lr < best_mse:
    best_model = "Linear Regression"
    best_mse = mse_lr
    best_r2 = r2_lr

# Decision Tree Regression
if mse_dt < best_mse:
    best_model = "Decision Tree Regression"
    best_mse = mse_dt
    best_r2 = r2_dt

# Random Forest Regression
if mse_rf < best_mse:
    best_model = "Random Forest Regression"
    best_mse = mse_rf
    best_r2 = r2_rf

print("\nBest Model:")
print("Model:", best_model)
print("Mean Squared Error:", best_mse)
print("R-squared:", best_r2)

