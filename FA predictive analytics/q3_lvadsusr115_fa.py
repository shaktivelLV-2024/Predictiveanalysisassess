# -*- coding: utf-8 -*-
"""Q3_LVADSUSR115_FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zrmT_bWgACWsNZF2jlC0_q1qMlZRi-VT
"""

import pandas as pd

import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
import warnings as wr
import seaborn as sns
wr.filterwarnings('ignore')
data = pd.read_csv("/content/seeds.csv")
data.head()

#EDA
data.describe()
print(data.shape)
print(data.info())

print(data.describe())

missing_values = data.isnull().sum()
print("Missing Values:\n", missing_values)

duplicate_rows = data.duplicated().sum()
print("\nDuplicate Rows:", duplicate_rows)
data.drop_duplicates(inplace=True)

data.hist(figsize=(10, 8))
plt.tight_layout()
plt.show()

sns.pairplot(data, diag_kind='kde')
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler


X = data.drop(columns=["Area"])


imputer = SimpleImputer(strategy='mean')
X_imputed = imputer.fit_transform(X)

scaler = MinMaxScaler()
X_normalized = scaler.fit_transform(X_imputed)

sse = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_normalized)
    sse.append(kmeans.inertia_)
sse

plt.figure(figsize=(10,6))
plt.plot(range(1, 11), sse, marker='o', linestyle='--')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('SSE')
plt.show()

optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', random_state=42)
kmeans.fit(X_normalized)

clusters = kmeans.predict(X_normalized)
data["Cluster"] = clusters
clusters

#  clusters
plt.figure(figsize=(10, 6))
for cluster_label in data["Cluster"].unique():
    cluster_data = data[data["Cluster"] == cluster_label]
    plt.scatter(cluster_data["Area"], cluster_data["Perimeter"], label=f"Cluster {cluster_label}")

plt.xlabel("Area")
plt.ylabel("Perimeter")
plt.title("Clusters of Seeds Based on Physical Characteristics")
plt.legend()
plt.show()

