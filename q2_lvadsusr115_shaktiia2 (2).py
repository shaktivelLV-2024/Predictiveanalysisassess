# -*- coding: utf-8 -*-
"""Q2_LVADSUSR115_ShaktiIA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iVLqJfGSgCCssh-ynIhXSaYq0SGET1Ew
"""

import pandas as pd
import warnings as wr
wr.filterwarnings('ignore')
data= pd.read_csv("/content/Mall_Customers.csv")
data.head()

# # Handle missing values and outliers
nulls = data.isnull().sum()
print(nulls)

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

#aImpute missing values

imputer = SimpleImputer(strategy='mean')
imputed_data = imputer.fit_transform(scaled_data)

# # imputed_data
# data.dropna(inplace=True)

# Feature engineering - calculate the ratio of spending to income
data['SpendingtoIncomeRatio'] = data[''] / data['Annual Income (k$)']
data

# Normalize the numerical columns
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'SpendingtoIncomeRatio']])

# scaler = MinMaxScaler()
# scaled_data = scaler.fit_transform(data.iloc[:, 2:])
# scaled_data

# Feature engineering - calculate the ratio of spending to income
data['SpendingtoIncomeRatio'] = data['Spending Score (1-100)'] / data['Annual Income (k$)']
data

#b
# Find optimal clusters using the Elbow Method and Silhouette Method
inertia_values = []
silhouette_scores = []
k_values = range(2, 10)

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia_values.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

plt.plot(k_values, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Curve for Optimal k')
plt.xticks(k_values)
plt.show()

plt.plot(k_values, silhouette_scores, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Optimal k')
plt.xticks(k_values)
plt.show()

#c
optimal_k = 7
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(scaled_data)

cluster_labels = kmeans.predict(scaled_data)

silhouette_avg = silhouette_score(scaled_data, cluster_labels)
print("silhouette score: ",silhouette_avg)

#d
data['Cluster'] = kmeans.labels_
cluster_profiles = data.groupby('Cluster').mean()
print(cluster_profiles)



"""1. Utilize clustering to identify customer segments based on purchasing behaviors.
2. Develop profiles for each cluster highlighting unique characteristics.
3. Tailor marketing campaigns with personalized recommendations for each segment.
4. Optimize communication channels based on segment preferences for effective outreach.
"""

































